name: Pull Request Close Teardown

# Ensures that only one instance of this workflow runs at a time for a given branch,
# canceling any in-progress runs if a new one is triggered.
concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

on:
    pull_request:
        types: [closed]

jobs:
    prepare-environment:
        env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            PR_NUMBER: ${{ github.event.pull_request.number || github.event.number }}
        timeout-minutes: 5
        runs-on: ubuntu-latest
        permissions:
            contents: write
            pull-requests: write
        steps:
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: us-west-2

            # Checks out the repository code.
            - uses: actions/checkout@v4

            - name: Authenticate GitHub CLI
              run: echo "${{ env.GH_TOKEN }}" | gh auth login --with-token

            - name: Fetch PR Comments
              id: fetch-comments
              run: |
                  COMMENT=$(gh pr view ${{ github.event.pull_request.number }} --json comments -q '.comments[].body | select(contains("CloudFront Distribution ID"))')
                  COMMENT_DOMAIN=$(gh pr view ${{ github.event.pull_request.number }} --json comments -q '.comments[].body | select(contains("Domain Name"))')
                  DISTRIBUTION_ID=$(echo "$COMMENT" | grep "CloudFront Distribution ID" | awk '{print $4}')
                  DISTRIBUTION_DOMAIN=$(echo "$COMMENT" | grep "Domain Name" | awk -F'[][]' '{print $2}')

                  echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_ENV
                  echo "DISTRIBUTION_DOMAIN=$DISTRIBUTION_DOMAIN" >> $GITHUB_ENV

            - name: Verify Distribution ID
              run: |
                  echo "Distribution ID is ${{ env.DISTRIBUTION_ID }}"
                  echo "DISTRIBUTION DOMAIN is ${{ env.DISTRIBUTION_DOMAIN }}"

            # - name: Remove S3 Policy
            #   run: |
            #       aws s3api get-bucket-policy --bucket bucket-customerportal-dev-broadlumex-api --query Policy --output text | jq --arg PR_NUMBER "${{ env.PR_NUMBER }}" 'del(.Statement[] | select(.Sid == "BMS-Portal-PR-preview-\($PR_NUMBER)"))' > remove-cloudfront-policy.json
            #       aws s3api put-bucket-policy --bucket bucket-customerportal-dev-broadlumex-api --policy file://remove-cloudfront-policy.json

            # - name: Remove Files from S3
            #   run: aws s3 rm --recursive s3://bucket-customerportal-dev-broadlumex-api/pr-previews/${{env.PR_NUMBER}}/

            # - name: Disable Distribution
            #   run: |
            #       aws cloudfront get-distribution-config --id ${{env.DISTRIBUTION_ID}} --query DistributionConfig > current-config.json
            #       # Modify the config to set Enabled to false
            #       cat current-config.json | jq '.Enabled = false' > disabled-config.json

            #       # Get the ETag
            #       ETAG=$(aws cloudfront get-distribution-config --id ${{env.DISTRIBUTION_ID}} --query 'ETag' --output text)

            #       # Update the distribution
            #       aws cloudfront update-distribution \
            #           --id ${{env.DISTRIBUTION_ID}} \
            #           --distribution-config file://disabled-config.json \
            #           --if-match $ETAG
